prv.key.loaded <- PKI.load.key(prv.pem.loaded)
## read encrypted file from disk
read.binfile <- file("encrypted_message.dat", "rb")
reread.encrypted.data <- readBin(read.binfile, raw(), n=999999999)
close(read.binfile)
## read second message
read.binfile2 <- file("encrypted_message2.dat", "rb")
reread.encrypted.data2 <- readBin(read.binfile2, raw(), n=999999999)
close(read.binfile2)
## decrypt file with private key + print it on screen
decrypted_message <- rawToChar(PKI.decrypt(reread.encrypted.data, prv.key.loaded))
print(decrypted_message)
## second message
decrypted_message2 <- rawToChar(PKI.decrypt(reread.encrypted.data2, prv.key.loaded))
print(decrypted_message2)
## read encrypted file from disk
read.binfile <- file("encrypted_message.dat", "rb")
reread.encrypted.data <- readBin(read.binfile, raw(), n=999999999)
close(read.binfile)
## decrypt file with private key + print it on screen
decrypted_message <- rawToChar(PKI.decrypt(reread.encrypted.data, prv.key.loaded))
print(decrypted_message)
library(PKI)
rm(list = ls())
# 1) Generate keypair for ceu.edu and save it in pem format ------------------
key <- PKI.genRSAkey(bits = 2048L)
prv.pem <- PKI.save.key(key, private=TRUE)
pub.pem <- PKI.save.key(key, private=FALSE)
# 2) ceu.edu sends private pem file to visitor ------------------------------------
write(pub.pem, file="id_ceu_edu.pub")
write(prv.pem, file="id_ceu_edu")
# 3) visitor creates encrypted message using CEU's public key ------------------------
##load pem format and convert to key
pub.pem.loaded <- scan("id_ceu_edu.pub", what='list', sep='\n')
pub.key.loaded <- PKI.load.key(pub.pem.loaded)
## encrprypt random message with CEU's private key
message <- 'Something that should be encrpyted'
bytes.to.encode = charToRaw(message)
encrypted <- PKI.encrypt(bytes.to.encode, pub.key.loaded)
# 4) visitor sends encrypted message to CEU ----------------------------------
writeBin(encrypted, file("encrypted_message.dat", "wb"))
close(file("encrypted_message.dat", "wb"))
# Adding second message ---------------------------------------------------
pub.pem.loaded <- scan("id_ceu_edu.pub", what='list', sep='\n')
pub.key.loaded <- PKI.load.key(pub.pem.loaded)
message2 <- 'This shall be the big big message'
bytes.to.encode = charToRaw(message2)
encrypted <- PKI.encrypt(bytes.to.encode, pub.key.loaded)
writeBin(encrypted, file("encrypted_message2.dat", "wb"))
close(file("encrypted_message2.dat", "wb"))
# 5) CEU reads it's private key from disk + decrypts message -----------------
##load private key from disk + convert to key
prv.pem.loaded <- scan("id_ceu_edu", what='list', sep='\n')
prv.key.loaded <- PKI.load.key(prv.pem.loaded)
## read encrypted file from disk
read.binfile <- file("encrypted_message.dat", "rb")
reread.encrypted.data <- readBin(read.binfile, raw(), n=999999999)
close(read.binfile)
## read second message
read.binfile2 <- file("encrypted_message2.dat", "rb")
reread.encrypted.data2 <- readBin(read.binfile2, raw(), n=999999999)
close(read.binfile2)
## decrypt file with private key + print it on screen
decrypted_message <- rawToChar(PKI.decrypt(reread.encrypted.data, prv.key.loaded))
print(decrypted_message)
library(tidyverse)
require(scales)
library(lspline)
library(estimatr)
library(texreg)
library(ggthemes)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df<- read_csv('../data/clean/covid_pop_20201015_clean.csv')
# EDA ---------------------------------------------------------------------
## histograms look to be skewed to the right
df %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~key, scales = "free") +
geom_histogram()+
theme_wsj() +
scale_fill_wsj()
##  create per capita variables
colnames(df)
df <- df %>%
mutate(
death_pc = as.numeric(deaths/(population/1000000)),
conf_pc = as.numeric(confirmed / (population/1000000)),
mortality = as.numeric(deaths/confirmed)
)
## plotting
## a) level-level - scaled
ggplot( df , aes(x = conf_pc, y =death_pc )) +
geom_point() +
geom_smooth(method="loess")
## two extreme values in terms of confirmed cases/1m people: Qatar, Bahrein
## Otherwise there seems to be a positive trend
ggplot( df , aes(x = conf_pc, y =death_pc )) +
geom_point() +
geom_smooth(method="loess")+
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )
ggplot( df , aes(x = conf_pc, y =death_pc )) +
geom_point() +
geom_smooth(method="loess")+
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,3000,10000) )+
scale_y_continuous( trans = log_trans(), breaks = c(1,20,200,400) )
## Conclusion - log-log transformation seems to be giving a good fit
## we will remove cases where nobody died, so that ln transform can happen
df <- df %>%  filter(deaths != 0)
df <- df %>% mutate( ln_conf_pc = log( conf_pc ),
ln_death_pc = log( death_pc ) )
# Regression tests --------------------------------------------------------
## We create variables to use polinomials later on
df <- df %>% mutate( ln_conf_pc_sq = ln_conf_pc^2,
ln_conf_pc_cb = ln_conf_pc^3
)
## linear
reg1 <- lm_robust( ln_death_pc ~ ln_conf_pc , data = df , se_type = "HC2" )
summary( reg1 )
ggplot( data = df, aes( x = ln_conf_pc, y = ln_death_pc ) ) +
geom_point( color='blue') +
geom_smooth( method = lm , color = 'red' )
## quadratic
reg2 <- lm_robust( ln_death_pc ~ ln_conf_pc + ln_conf_pc_sq , data = df )
summary( reg2 )
ggplot( data = df, aes( x = ln_conf_pc, y = ln_death_pc ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ poly(x,2) , method = lm , color = 'red' )
## pls
ln_cutoff <- log(c(200,3000))
reg3 <- lm_robust(ln_death_pc ~ lspline( ln_conf_pc , ln_cutoff ), data = df )
summary( reg3 )
ggplot( data = df, aes( x = ln_conf_pc, y = ln_death_pc ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ lspline(x,ln_cutoff) , method = lm , color = 'red' )
## weighted
reg4 <- lm_robust(ln_death_pc ~ ln_conf_pc, data = df , weights = population)
summary( reg4 )
ggplot(data = df, aes(x = ln_conf_pc, y = ln_death_pc)) +
geom_point(data = df, aes(size=population),  color = 'blue', shape = 16, alpha = 0.6,  show.legend=F) +
geom_smooth(aes(weight = population), method = "lm", color='red')
#scale_size(range = c(1, 15)) +
#coord_cartesian(ylim = c(50, 85)) +
#labs(x = "ln(GDP per capita, thousand US dollars) ",y = "Life expectancy  (years)")+
#annotate("text", x = 4, y = 80, label = "USA", size=5)+
#annotate("text", x = 2.7, y = 79, label = "China", size=5)+
#annotate("text", x = 2,  y = 68, label = "India", size=5)
# Choose model ------------------------------------------------------------
data_out <- '../out/'
htmlreg( list(reg1 , reg2 , reg3 , reg4),
type = 'html',
custom.model.names = c("Confirmed/capita - linear","Confirmed/capita - quadratic",
"Confirmed/capita - PLS",'Confirmed/capita - weighted linear'),
caption = "Modeling Covid-19 caused deaths and confirmed cases",
file = paste0( data_out ,'model_comparison.html'), include.ci = FALSE)
# Prediction errors -------------------------------------------------------
# Get the predicted y values from the model
df$reg4_y_pred <- reg4$fitted.values
# Calculate the errors of the model
df$reg4_res <- df$ln_death_pc - df$reg4_y_pred
# Find countries with largest negative errors
df %>% top_n( -5 , reg4_res ) %>%
select( country , ln_death_pc , reg4_y_pred , reg4_res )
# Find countries with largest positive errors
df %>% top_n( 5 , reg4_res ) %>%
select( country , ln_death_pc , reg4_y_pred , reg4_res )
knitr::opts_chunk$set(echo = TRUE)
data_in <- "C:/Users/T450s/Desktop/programming/git/ba_da1/group_g_assignments/data/clean/"
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(moments)
library(xtable)
library(ggpubr)
require(scales)
library(lspline)
library(estimatr)
library(texreg)
library(ggthemes)
#library(ggcorrplot)
knitr::opts_chunk$set(echo = TRUE)
df <- read_csv(paste0(data_in,"covid_pop_20201015_clean.csv"))
data_in <- "C:/Users/T450s/Desktop/programming/git/ba_da2/Assignment_1/data/clean/"
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read_csv(paste0(data_in,"covid_pop_20201015_clean.csv"))
df <- df %>%
filter(deaths != 0) %>%
mutate(
death_pc = as.numeric(deaths/(population/1000000)),
conf_pc = as.numeric(confirmed / (population/1000000)),
mortality = as.numeric(deaths/confirmed),
ln_conf_pc = log( conf_pc ),
ln_death_pc = log( death_pc )
)
death_pc_sum <- df %>% summarise(
variable = 'Death per capita',
mean     = mean(death_pc),
median   = median(death_pc),
std      = sd(death_pc),
iq_range = IQR(death_pc),
min      = min(death_pc),
max      = max(death_pc),
skew     = skewness(death_pc),
numObs   = sum( !is.na( death_pc ) ) )
conf_pc_sum <- df %>% summarise(
variable = 'Confirmed cases per capita',
mean     = mean(conf_pc),
median   = median(conf_pc),
std      = sd(conf_pc),
iq_range = IQR(conf_pc),
min      = min(conf_pc),
max      = max(conf_pc),
skew     = skewness(conf_pc),
numObs   = sum( !is.na( conf_pc ) ) )
df_summary <- death_pc_sum %>% add_row( conf_pc_sum )
xtb <- xtable(df_summary,type = "latex", caption = "Summary statistics of `x` and `y` variables")
print(xtb, comment=FALSE, include.rownames=FALSE)
knitr::opts_chunk$set(echo = TRUE)
data_in <- "C:/Users/T450s/Desktop/programming/git/ba_da2/Assignment_1/data/clean/"
df <- df %>%
filter(deaths != 0) %>%
mutate(
death_pc = as.numeric(deaths/(population/1000000)),
conf_pc = as.numeric(confirmed / (population/1000000)),
mortality = as.numeric(deaths/confirmed),
ln_conf_pc = log( conf_pc ),
ln_death_pc = log( death_pc )
)
death_pc_sum <- df %>% summarise(
variable = 'Death per capita',
mean     = mean(death_pc),
median   = median(death_pc),
std      = sd(death_pc),
iq_range = IQR(death_pc),
min      = min(death_pc),
max      = max(death_pc),
skew     = skewness(death_pc),
numObs   = sum( !is.na( death_pc ) ) )
conf_pc_sum <- df %>% summarise(
variable = 'Confirmed cases per capita',
mean     = mean(conf_pc),
median   = median(conf_pc),
std      = sd(conf_pc),
iq_range = IQR(conf_pc),
min      = min(conf_pc),
max      = max(conf_pc),
skew     = skewness(conf_pc),
numObs   = sum( !is.na( conf_pc ) ) )
df_summary <- death_pc_sum %>% add_row( conf_pc_sum )
xtb <- xtable(df_summary,type = "latex", caption = "Summary statistics of `x` and `y` variables")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(moments)
library(xtable)
library(ggpubr)
require(scales)
library(lspline)
library(estimatr)
library(texreg)
library(ggthemes)
#library(ggcorrplot)
data_in <- "../data/clean/"
df <- read_csv(paste0(data_in,"covid_pop_20201015_clean.csv"))
knitr::opts_chunk$set(echo = TRUE)
p1<- ggplot( df , aes( x = death_pc ) ) +
geom_histogram( aes(y = ..density..) , alpha = 1, binwidth = 100, color = 'black', fill = 'white') +
geom_density( aes(y = ..density..) , alpha = .2 , bw = 100, color = 'black', fill="#FF6666") +
labs(x='Death per capita for countries',y='Density')
p2<- ggplot( df , aes( x = conf_pc ) ) +
geom_histogram( aes(y = ..density..) , alpha = 1, binwidth = 30, color = 'black', fill = 'white') +
geom_density( aes(y = ..density..) , alpha = .2 , bw = 30, color = 'black', fill="#56B4E9") +
labs(x='Confirmed COVID-19 cases per capita',y='Density')
print(xtb, comment=FALSE, include.rownames=FALSE)
library(tidyverse)
require(scales)
library(lspline)
library(estimatr)
library(texreg)
library(ggthemes)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df<- read_csv('../data/clean/covid_pop_20201015_clean.csv')
# EDA ---------------------------------------------------------------------
## histograms look to be skewed to the right
df %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~key, scales = "free") +
geom_histogram()+
theme_wsj() +
scale_fill_wsj()
##  create per capita variables
colnames(df)
df <- df %>%
mutate(
death_pc = as.numeric(deaths/(population/1000000)),
conf_pc = as.numeric(confirmed / (population/1000000)),
mortality = as.numeric(deaths/confirmed)
)
## plotting
## a) level-level - scaled
ggplot( df , aes(x = conf_pc, y =death_pc )) +
geom_point() +
geom_smooth(method="loess")
## two extreme values in terms of confirmed cases/1m people: Qatar, Bahrein
## Otherwise there seems to be a positive trend
ggplot( df , aes(x = conf_pc, y =death_pc )) +
geom_point() +
geom_smooth(method="loess")+
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )
ggplot( df , aes(x = conf_pc, y =death_pc )) +
geom_point() +
geom_smooth(method="loess")+
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,3000,10000) )+
scale_y_continuous( trans = log_trans(), breaks = c(1,20,200,400) )
## Conclusion - log-log transformation seems to be giving a good fit
## we will remove cases where nobody died, so that ln transform can happen
df <- df %>%  filter(deaths != 0)
df <- df %>% mutate( ln_conf_pc = log( conf_pc ),
ln_death_pc = log( death_pc ) )
# Regression tests --------------------------------------------------------
## We create variables to use polinomials later on
df <- df %>% mutate( ln_conf_pc_sq = ln_conf_pc^2,
ln_conf_pc_cb = ln_conf_pc^3
)
## linear
reg1 <- lm_robust( ln_death_pc ~ ln_conf_pc , data = df , se_type = "HC2" )
summary( reg1 )
ggplot( data = df, aes( x = ln_conf_pc, y = ln_death_pc ) ) +
geom_point( color='blue') +
geom_smooth( method = lm , color = 'red' )
## quadratic
reg2 <- lm_robust( ln_death_pc ~ ln_conf_pc + ln_conf_pc_sq , data = df )
summary( reg2 )
ggplot( data = df, aes( x = ln_conf_pc, y = ln_death_pc ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ poly(x,2) , method = lm , color = 'red' )
## pls
ln_cutoff <- log(c(200,3000))
reg3 <- lm_robust(ln_death_pc ~ lspline( ln_conf_pc , ln_cutoff ), data = df )
summary( reg3 )
ggplot( data = df, aes( x = ln_conf_pc, y = ln_death_pc ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ lspline(x,ln_cutoff) , method = lm , color = 'red' )
## weighted
reg4 <- lm_robust(ln_death_pc ~ ln_conf_pc, data = df , weights = population)
summary( reg4 )
ggplot(data = df, aes(x = ln_conf_pc, y = ln_death_pc)) +
geom_point(data = df, aes(size=population),  color = 'blue', shape = 16, alpha = 0.6,  show.legend=F) +
geom_smooth(aes(weight = population), method = "lm", color='red')
#scale_size(range = c(1, 15)) +
#coord_cartesian(ylim = c(50, 85)) +
#labs(x = "ln(GDP per capita, thousand US dollars) ",y = "Life expectancy  (years)")+
#annotate("text", x = 4, y = 80, label = "USA", size=5)+
#annotate("text", x = 2.7, y = 79, label = "China", size=5)+
#annotate("text", x = 2,  y = 68, label = "India", size=5)
# Choose model ------------------------------------------------------------
data_out <- '../out/'
htmlreg( list(reg1 , reg2 , reg3 , reg4),
type = 'html',
custom.model.names = c("Confirmed/capita - linear","Confirmed/capita - quadratic",
"Confirmed/capita - PLS",'Confirmed/capita - weighted linear'),
caption = "Modeling Covid-19 caused deaths and confirmed cases",
file = paste0( data_out ,'model_comparison.html'), include.ci = FALSE)
# Prediction errors -------------------------------------------------------
# Get the predicted y values from the model
df$reg4_y_pred <- reg4$fitted.values
# Calculate the errors of the model
df$reg4_res <- df$ln_death_pc - df$reg4_y_pred
# Find countries with largest negative errors
df %>% top_n( -5 , reg4_res ) %>%
select( country , ln_death_pc , reg4_y_pred , reg4_res )
# Find countries with largest positive errors
df %>% top_n( 5 , reg4_res ) %>%
select( country , ln_death_pc , reg4_y_pred , reg4_res )
summary( reg1 )
library(xtable)
summary( reg2 )
summary( reg1 )
sum<- summary( reg1 )
sum_tb <- xtable(sum,type = "latex", caption = "tryout")
sum<- summary( reg1 )
t.test( df$ln_conf_pc , mu = 0)
summary(reg1)
mean(df$ln_conf_pc)
library(car)
# Test if beta = 0
# Let test: H0: ln_gdppc = 5, HA: ln_gdppc neq 5
linearHypothesis( reg1 , "ln_conf_pc = 0")
install.packages("broom")
install.packages("purrr")
t1<-t.test( df$ln_conf_pc , mu = 0)
tab <- map_df(list(t1), tidy)
tab <- map_df(t1, tidy)
tab <- map_df(list(t1), tidy)
tab[c("estimate", "statistic", "p.value", "conf.low", "conf.high")]
xtbl <- xtable(tab,type = "latex", caption = "tryout")
linearHypothesis( reg1 , "ln_conf_pc = 0")
lin <-linearHypothesis( reg1 , "ln_conf_pc = 0")
View(lin)
summary(reg1)
lin<- summary(reg1)
tab2 <- map_df(list(lin), tidy)
glance(lin)
glance(reg1)
lin2<- glance(reg1)
reg1
View(lin2)
View(lin2)
summary(reg1)
lin<- summary(reg1)
tab2 <- map_df(list(lin), tidy)
glance(lin)
glance(reg1)
lin<- summary(reg1)
tidy(lin)
t.test(ln_death_pc ~ ln_conf_pc,df)
t.test(ln_death_pc ~ ln_conf_pc)
t.test(df$ln_death_pc ~ df$ln_conf_pc)
df
t.test(death_pc ~ conf_pc)
t.test(death_pc ~ conf_pc, df)
lo<- t.test(death_pc ~ conf_pc, df)
reg1
t<- reg1
tidy(t)
t2<- tidy(t)
t2
View(t2)
reg1 <- lm_robust( ln_death_pc ~ ln_conf_pc , data = df , se_type = "HC2" )
tab<- tidy(reg1)
tab <-  tab %>%
filter(term== 'ln_conf_pc') %>%
mutate(
t-statistic = statistic,
reg1 <- lm_robust( ln_death_pc ~ ln_conf_pc , data = df , se_type = "HC2" )
tab<- tidy(reg1)
tab <-  tab %>%
filter(term == 'ln_conf_pc') %>%
mutate(
t-statistic = statistic,
tabt <-  t2 %>%
filter(term == 'ln_conf_pc') %>%
mutate(
t-statistic = statistic,
num_obs = df,
outcome = NULL
)
tabt <-  t2 %>%
filter(term == 'ln_conf_pc') %>%
mutate(
t-statistic = statistic,
num_obs = df,
outcome = NULL
)
tabt <-  t2 %>%
filter(term == 'ln_conf_pc') # %>%
tabt <-  t2 %>%
filter(term == 'ln_conf_pc')  %>%
mutate(t-statistic = statistic)
class(t2)
tabt <-  t2 %>%
filter(term == 'ln_conf_pc')  %>%
mutate(t-statistic = statistic+1)
tabt %>% mutate(a = term)
tabt <-  t2 %>%
filter(term == 'ln_conf_pc')  %>%
mutate('t-statistic' = statistic+1)
tabt <-  t2 %>%
filter(term == 'ln_conf_pc')  %>%
transmute(
variable=term,
estimate = estimate,
std.error = std.error,
statistic = statistic,
p.value = p.value,
conf.low = conf.low,
conf.high = conf.high,
numObs = df)
reg1 <- lm_robust( ln_death_pc ~ ln_conf_pc , data = df , se_type = "HC2" )
tab<- tidy(reg1)
tab <-  tab %>%
filter(term == 'ln_conf_pc')  %>%
transmute(
variable=term,
estimate = estimate,
std.error = std.error,
statistic = statistic,
p.value = p.value,
conf.low = conf.low,
conf.high = conf.high,
numObs = df)
xtb2 <- xtable(tab,type = "latex", caption = "Hypothesis testing for the slope of the regression")
print(xtb2,comment = FALSE, include.rownames = FALSE)
lo<- t.test(death_pc ~ conf_pc, df)
lin <-linearHypothesis( reg1 , "ln_conf_pc = 0")
tab<- tidy(reg1)
tab <-  tab %>%
filter(term == 'ln_conf_pc')  %>%
transmute(
variable=term,
estimate = estimate,
std.error = std.error,
statistic = statistic,
p.value = p.value,
conf.low = conf.low,
conf.high = conf.high,
numObs = df)
#      num_obs = df,
#     outcome = NULL
#)
tab

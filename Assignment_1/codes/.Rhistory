df_covid
merged_df <- merge(x = df_covid, y = df_population, by = "country", all = TRUE)
merged_df
joined <- full_join df_covid,df_population)
joined <- full_join(df_covid,df_population)
?full_join
joined_df <- full_join(df_covid,df_population by = 'country')
joined_df <- full_join(df_covid,df_population, by = 'country')
## we will have a lot of patrial matches, let's look at observations with NAs
complete.cases(joined_df)
## we will have a lot of patrial matches, let's look at observations with NAs
joined_df[complete.cases(joined_df)]
## we will have a lot of patrial matches, let's look at observations with NAs
joined_df[complete.cases(joined_df)==TRUE]
## we will have a lot of patrial matches, let's look at observations with NAs
joined_df[complete.cases(joined_df),]
## we will have a lot of patrial matches, let's look at observations with NAs
joined_df[!complete.cases(joined_df),]
## we will have a lot of patrial matches, let's look at observations with NAs
temp_df <- joined_df %>%
filter(complete.cases(joined_df)) %>%
arrange(country)
temp_df
temp_df['country']
print(temp_df['country'])
## we will have a lot of patrial matches, let's look at observations with NAs
temp_df <- joined_df %>%
filter(complete.cases(joined_df)) %>%
transmute(country=country),
arrange(country)
## we will have a lot of patrial matches, let's look at observations with NAs
temp_df <- joined_df %>%
filter(complete.cases(joined_df)) %>%
transmute(country=country) %>%
arrange(country)
## we will have a lot of patrial matches, let's look at observations with NAs
temp_vector <- joined_df %>%
filter(complete.cases(joined_df)) %>%
transmute(country=country) %>%
arrange(country)
## we will have a lot of patrial matches, let's look at observations with NAs
temp_df <- joined_df %>%
filter(complete.cases(joined_df)) %>%
transmute(country=country) %>%
arrange(country)
View(temp_df)
## we will have a lot of patrial matches, let's look at observations with NAs
temp_df <- joined_df %>%
filter(!complete.cases(joined_df)) %>%
transmute(country=country) %>%
arrange(country)
View(temp_df)
View(temp_df)
## manually picking out records to be renamed
keep_names <- c(
'Brunei', 'Bahamas',
'Egypt', 'Czech Republic', 'Congo, Dem. Rep.', 'Congo (Brazzaville)',
'Kyrgyzstan', 'Korea, South', 'Iran', 'Gambia',
'Saint Lucia', 'Saint Kitts and Nevis', 'Slovakia','Russia',
'St. Vincent and the Grenadines','United States','Venezuela', 'Yemen')
change_names <- c(
'Brunei Darussalam','Bahamas, The',
'Egypt, Arab Rep.', 'Czechia', 'Congo, Rep.', 'Congo (Kinshasa)',
'Kyrgyz Republic', 'Korea, Rep.', 'Iran, Islamic Rep.', 'Gambia, The',
'St. Lucia','St. Kitts and Nevis', 'Slovak Republic', 'Russian Federation',
'Saint Vincent and the Grenadines','US','Venezuela, RB','Yemen, Rep.')
##
for ( i in seq_along( keep_names ) ){
joined_df$country[ joined_df $country == change_names[ i ] ] <- keep_names[ i ]
}
joined_df2<- joined_df %>%
summarise(
confirmed = sum( confirmed ),
deaths = sum( deaths ),
recovered = sum( recovered ),
active = sum( active ) )
joined_df2<- joined_df %>%
group_by(country) %>%
summarise(
confirmed = sum( confirmed ),
deaths = sum( deaths ),
recovered = sum( recovered ),
active = sum( active ) )
View(joined_df2)
joined_df2<- joined_df %>%
group_by(country) %>%
summarise(
confirmed = sum( confirmed ),
deaths = sum( deaths ),
recovered = sum( recovered ),
active = sum( active ),
population = sum(population))
View(joined_df2)
View(joined_df)
View(df_population)
## merging dataframes with full join
joined_df <- full_join(df_covid,df_population, by = 'country')
View(joined_df)
## manually picking out records to be renamed
keep_names <- c(
'Brunei', 'Bahamas',
'Egypt', 'Czech Republic',
'Congo', 'Congo', 'Congo', 'Congo',
'Kyrgyzstan', 'Korea, South', 'Iran', 'Gambia',
'Saint Lucia', 'Saint Kitts and Nevis', 'Slovakia','Russia',
'St. Vincent and the Grenadines','United States','Venezuela', 'Yemen')
change_names <- c(
'Brunei Darussalam','Bahamas, The',
'Egypt, Arab Rep.', 'Czechia',
'Congo, Dem. Rep.', 'Congo, Rep.', 'Congo (Kinshasa)','Congo (Brazzaville)',
'Kyrgyz Republic', 'Korea, Rep.', 'Iran, Islamic Rep.', 'Gambia, The',
'St. Lucia','St. Kitts and Nevis', 'Slovak Republic', 'Russian Federation',
'Saint Vincent and the Grenadines','US','Venezuela, RB','Yemen, Rep.')
##
for ( i in seq_along( keep_names ) ){
joined_df$country[ joined_df $country == change_names[ i ] ] <- keep_names[ i ]
}
joined_df2<- joined_df %>%
group_by(country) %>%
summarise(
confirmed = sum( confirmed ),
deaths = sum( deaths ),
recovered = sum( recovered ),
active = sum( active ),
population = sum(population))
## merging dataframes with full join
joined_df <- full_join(df_covid,df_population, by = 'country')
View(joined_df2)
View(joined_df)
##
for ( i in seq_along( keep_names ) ){
joined_df$country[ joined_df $country == change_names[ i ] ] <- keep_names[ i ]
}
joined_df2<- joined_df %>%
group_by(country) %>%
summarise(
confirmed = sum( confirmed ),
deaths = sum( deaths ),
recovered = sum( recovered ),
active = sum( active ),
population = sum(population))
View(joined_df2)
?sum
joined_df2<- joined_df %>%
group_by(country) %>%
summarise(
confirmed = sum( confirmed, na.rm = TRUE ),
deaths = sum( deaths, na.rm = TRUE),
recovered = sum( recovered, na.rm = TRUE ),
active = sum( active, na.rm = TRUE ),
population = sum(population, na.rm = TRUE))
View(joined_df2)
View(joined_df2)
View(df_covid)
View(df_covid)
df_population <- read_csv("../data/raw/population_2019_raw.csv")
## special cases
to_drop <- c("EU","HK","OE")
to_retain <- c("XK","ZA","ZM","ZW")
## filtering out grouped entitites
### a) those that have an integer in their iso2c
df_population <- df_population %>%
filter(!grepl("[[:digit:]]", df_population$iso2c))
### b) further manually spotted grouped entitites e.g. EU
df_population <- df_population %>%
filter(!grepl( paste( to_drop , collapse="|"), df_population$iso2c ))
### c) most records that have X, or Z in their iso2c except `to_retain` vector
fl_iso2c <- substr(df_population$iso2c, 1, 1)
df_population <- df_population %>%
filter(!(grepl( "X", fl_iso2c ) | grepl( "Z", fl_iso2c ) &
!grepl( paste( to_retain , collapse="|"),
df_population$iso2c ) ) )
### d) NAs or NaNs
df_population <-
df_population %>%
filter(complete.cases(df_population) | is.na(df_population$iso2c))
## keep columns needed
df_population <-
df_population %>%
transmute( country = country,
population=SP.POP.TOTL)
## First we load the data
df_covid <- read_csv( "../data/raw/covid_20201015_raw.csv" )
## I do 3 things: 1) group by country 2) sum records that appera multiple
## times for a given country - since they were broken out to regions and 3)
## naturally unusued columns not defined in summarise function are dropped
df_covid <- df_covid %>%
mutate(country=Country_Region) %>%
group_by(country) %>%
summarise(
confirmed = sum( Confirmed, na.rm = TRUE ),
deaths = sum( Deaths, na.rm = TRUE ),
recovered = sum( Recovered , na.rm = TRUE),
active = sum( Active, na.rm = TRUE ) )
View(df_covid)
## merging dataframes with full join
joined_df <- full_join(df_covid,df_population, by = 'country')
## manually picking out records to be renamed
keep_names <- c(
'Brunei', 'Bahamas',
'Egypt', 'Czech Republic',
'Congo', 'Congo', 'Congo', 'Congo',
'Kyrgyzstan', 'Korea, South', 'Iran', 'Gambia',
'Saint Lucia', 'Saint Kitts and Nevis', 'Slovakia','Russia',
'St. Vincent and the Grenadines','United States','Venezuela', 'Yemen')
change_names <- c(
'Brunei Darussalam','Bahamas, The',
'Egypt, Arab Rep.', 'Czechia',
'Congo, Dem. Rep.', 'Congo, Rep.', 'Congo (Kinshasa)','Congo (Brazzaville)',
'Kyrgyz Republic', 'Korea, Rep.', 'Iran, Islamic Rep.', 'Gambia, The',
'St. Lucia','St. Kitts and Nevis', 'Slovak Republic', 'Russian Federation',
'Saint Vincent and the Grenadines','US','Venezuela, RB','Yemen, Rep.')
##
for ( i in seq_along( keep_names ) ){
joined_df$country[ joined_df $country == change_names[ i ] ] <- keep_names[ i ]
}
joined_df<- joined_df %>%
group_by(country) %>%
summarise(
confirmed = sum( confirmed, na.rm = TRUE ),
deaths = sum( deaths, na.rm = TRUE),
recovered = sum( recovered, na.rm = TRUE ),
active = sum( active, na.rm = TRUE ),
population = sum(population, na.rm = TRUE))
View(joined_df)
## merging dataframes with full join
joined_df <- full_join(df_covid,df_population, by = 'country')
## we will have a lot of partial matches, let's look at observations with NAs
temp_df <- joined_df %>%
filter(!complete.cases(joined_df)) %>%
transmute(country=country) %>%
arrange(country)
## manually picking out records to be renamed
keep_names <- c(
'Brunei', 'Bahamas', 'Laos', 'Syria',
'Egypt', 'Czech Republic',
'Congo', 'Congo', 'Congo', 'Congo',
'Kyrgyzstan', 'Korea, South', 'Iran', 'Gambia',
'Saint Lucia', 'Saint Kitts and Nevis', 'Slovakia','Russia',
'St. Vincent and the Grenadines','United States','Venezuela', 'Yemen')
change_names <- c(
'Brunei Darussalam','Bahamas, The', 'Lao PDR', 'Syrian Arab Republic',
'Egypt, Arab Rep.', 'Czechia',
'Congo, Dem. Rep.', 'Congo, Rep.', 'Congo (Kinshasa)','Congo (Brazzaville)',
'Kyrgyz Republic', 'Korea, Rep.', 'Iran, Islamic Rep.', 'Gambia, The',
'St. Lucia','St. Kitts and Nevis', 'Slovak Republic', 'Russian Federation',
'Saint Vincent and the Grenadines','US','Venezuela, RB','Yemen, Rep.')
## renaming countries with partial matches
for ( i in seq_along( keep_names ) ){
joined_df$country[ joined_df $country == change_names[ i ] ] <- keep_names[ i ]
}
## summing up population and covid cases
joined_df<- joined_df %>%
group_by(country) %>%
summarise(
confirmed = sum( confirmed, na.rm = TRUE ),
deaths = sum( deaths, na.rm = TRUE),
recovered = sum( recovered, na.rm = TRUE ),
active = sum( active, na.rm = TRUE ),
population = sum(population, na.rm = TRUE))
joined_df %>%  filter(
population == 0 | confirmed ==0
)
joined_df %>%  filter(
population != 0 | confirmed !=0
)
joined_df %>%  filter(
!(population == 0 | confirmed ==0)
)
final_df <- joined_df %>%  filter(
!(population == 0 | confirmed ==0)
)
sum(complete_cases(final_df))
complete.cases(df)
complete.cases(final_df)
sum(complete.cases(final_df))
sum(complete.cases(final_df)) == nrow(final_df)
## No NAs left
getwd()
View(final_df)
write_csv('../data/clean/covid_pop_20201015_clean.csv')
write_csv(final_df, '../data/clean/covid_pop_20201015_clean.csv')
View(final_df)
rm(list = ls())
# Packages to use
library(tidyverse)
# For scaling ggplots
require(scales)
# Estimate piecewise linear splines
#install.packages("lspline")
library(lspline)
# Estimate robust SE
#install.packages("estimatr")
library(estimatr)
# Compare models with robust SE
#install.packages("texreg")
library(texreg)
# For different themes
#install.packages(ggthemes)
library(ggthemes)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df<- read_csv('../data/clean/covid_pop_20201015_clean.csv')
df %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~key, scales = "free") +
geom_histogram()+
theme_wsj() +
scale_fill_wsj()
View(df)
## We first create per capita variables
colnames(df)
df <- df %>%
mutate(
death_pc <- deaths/(population/1000000),
conf_pc <- confirmed / (population/1000000)
)
## plotting
## a)
ggplot( df , aes(x = death_pc, y = conf_pc)) +
geom_point() +
geom_smooth(method="loess")
df <- df %>%
mutate(
death_pc <- deaths/(population/1000000),
conf_pc <- confirmed / (population/1000000)
)
## plotting
## a)
ggplot( df , aes(x = death_pc, y = conf_pc)) +
geom_point() +
geom_smooth(method="loess")
## plotting
## a)
ggplot( df , aes(x = conf_pc, y =death_pc )) +
geom_point() +
geom_smooth(method="loess")
df <- df %>%
mutate(
death_pc <- as.numeric(deaths/(population/1000000)),
conf_pc <- as.numeric(confirmed / (population/1000000))
)
## plotting
## a)
ggplot( df , aes(x = conf_pc, y =death_pc )) +
geom_point() +
geom_smooth(method="loess")
df
View(df)
df<- read_csv('../data/clean/covid_pop_20201015_clean.csv')
df <- df %>%
mutate(
death_pc = as.numeric(deaths/(population/1000000)),
conf_pc = as.numeric(confirmed / (population/1000000))
)
## plotting
## a)
ggplot( df , aes(x = conf_pc, y =death_pc )) +
geom_point() +
geom_smooth(method="loess")
ggplot( df , aes(x = conf_pc, y =death_pc )) +
geom_point() +
geom_smooth(method="loess")+
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )
ggplot( df , aes(x = conf_pc, y =death_pc )) ++
geom_point() +
geom_smooth(method="loess")+
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )+
scale_y_continuous( trans = log_trans() )
ggplot( df , aes(x = conf_pc, y =death_pc )) +
geom_point() +
geom_smooth(method="loess")+
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )+
scale_y_continuous( trans = log_trans() )
ggplot( df , aes(x = conf_pc, y =death_pc )) +
geom_point() +
geom_smooth(method="loess")+
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )+
scale_y_continuous( trans = log_trans(), breaks = c(1,20,200,400) )
df <- df %>%
mutate(
death_pc = as.numeric(deaths/(population/1000000)),
conf_pc = as.numeric(confirmed / (population/1000000)),
mortality = as.numeric(deaths/confirmed)
)
View(df)
## we will remove cases where nobody died, so that ln transform can happen
df <- df %>%  filter(deaths != 0)
ggplot( df , aes(x = conf_pc, y =death_pc )) +
geom_point() +
geom_smooth(method="loess")+
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )+
scale_y_continuous( trans = log_trans(), breaks = c(1,20,200,400) )
ggplot( df , aes(x = conf_pc, y =death_pc )) +
geom_point() +
geom_smooth(method="loess")+
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )
ggplot( df , aes(x = conf_pc, y =death_pc )) +
geom_point() +
geom_smooth(method="loess")+
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )+
scale_y_continuous( trans = log_trans(), breaks = c(1,20,200,400) )
df <- df %>% mutate( ln_conf_pc = log( conf_pc ),
ln_death_pc = log( death_pc ) )
## We create variables to use polinomials later on
df <- df %>% mutate( ln_conf_pc_sq = ln_conf_pc^2,
ln_conf_pc_cb = ln_conf_pc^3
)
reg1 <- lm_robust( ln_death_pc ~ ln_conf_pc , data = df , se_type = "HC2" )
reg1
summary( reg1 )
ggplot( data = df, aes( x = ln_conf_pc, y = ln_death_pc ) ) +
geom_point( color='blue') +
geom_smooth( method = lm , color = 'red' )
reg2 <- lm_robust( ln_death_pc ~ ln_conf_pc + ln_conf_pc_sq , data = df )
summary( reg2 )
ggplot( data = df, aes( x = ln_conf_pc, y = ln_death_pc ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ poly(x,2) , method = lm , color = 'red' )
ggplot( data = df, aes( x = ln_gdptot, y = lifeexp ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ poly(x,3) , method = lm , color = 'red' )
reg3 <- lm_robust( ln_death_pc ~ ln_conf_pc + ln_conf_pc_sq + ln_conf_pc_cb , data = df )
summary( reg3 )
ggplot( data = df, aes( x = ln_conf_pc, y = ln_death_pc ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ poly(x,3) , method = lm , color = 'red' )
ggplot( df , aes(x = conf_pc, y =death_pc )) +
geom_point() +
geom_smooth(method="loess")+
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )+
scale_y_continuous( trans = log_trans(), breaks = c(1,20,200,400) )
ggplot( df , aes(x = conf_pc, y =death_pc )) +
geom_point() +
geom_smooth(method="loess")+
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,5000,10000) )+
scale_y_continuous( trans = log_trans(), breaks = c(1,20,200,400) )
ggplot( df , aes(x = conf_pc, y =death_pc )) +
geom_point() +
geom_smooth(method="loess")+
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,2000,10000) )+
scale_y_continuous( trans = log_trans(), breaks = c(1,20,200,400) )
## pls
ln_cutoff <= log(c(200,200))
## pls
ln_cutoff <- log(c(200,200))
reg4 <- lm_robust(ln_death_pc ~ lspline( ln_conf_pc , ln_cutoff ), data = df )
summary( reg4 )
ggplot( data = df, aes( x = ln_conf_pc, y = ln_death_pc ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ lspline(x,cutoff_ln) , method = lm , color = 'red' )
ggplot( data = df, aes( x = ln_conf_pc, y = ln_death_pc ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ lspline(x,ln_cutoff) , method = lm , color = 'red' )
## pls
ln_cutoff <- log(c(200,2000))
reg3 <- lm_robust(ln_death_pc ~ lspline( ln_conf_pc , ln_cutoff ), data = df )
summary( reg3 )
ggplot( data = df, aes( x = ln_conf_pc, y = ln_death_pc ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ lspline(x,ln_cutoff) , method = lm , color = 'red' )
## pls
ln_cutoff <- log(c(200,3000))
reg3 <- lm_robust(ln_death_pc ~ lspline( ln_conf_pc , ln_cutoff ), data = df )
summary( reg3 )
ggplot( data = df, aes( x = ln_conf_pc, y = ln_death_pc ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ lspline(x,ln_cutoff) , method = lm , color = 'red' )
ggplot( df , aes(x = conf_pc, y =death_pc )) +
geom_point() +
geom_smooth(method="loess")+
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,3000,10000) )+
scale_y_continuous( trans = log_trans(), breaks = c(1,20,200,400) )
ggplot( data = df, aes( x = ln_conf_pc, y = ln_death_pc ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ lspline(x,ln_cutoff) , method = lm , color = 'red' )
## weighted
reg4 <- lm_robust(ln_death_pc ~ ln_conf_pc, data = df , weights = population)
summary( reg7 )
summary( reg4 )
ggplot(data = df, aes(x = ln_conf_pc, y = ln_death_pc)) +
geom_point(data = df, aes(size=population),  color = 'blue', shape = 16, alpha = 0.6,  show.legend=F) +
geom_smooth(aes(weight = population), method = "lm", color='red')
data_out <- '../out'
data_out <- '../out/'
htmlreg( list(reg1 , reg2 , reg3 , reg4),
type = 'html',
custom.model.names = c("Confirmed/capita - linear","Confirmed/capita - quadratic",
"Confirmed/capita - PLS",'Confirmed/capita - weighted linear'),
caption = "Modeling Covid-19 caused deaths and confirmed cases",
file = paste0( data_out ,'model_comparison.html'), include.ci = FALSE)
# Get the predicted y values from the model
df$reg4_y_pred <- reg4$fitted.values
# Calculate the errors of the model
df$reg4_res <- df$death_pc - df$reg4_y_pred
# Find countries with largest negative errors
df %>% top_n( -5 , reg4_res ) %>%
select( country , death_pc , reg4_y_pred , reg4_res )
# Find countries with largest positive errors
df %>% top_n( 5 , reg4_res ) %>%
select( country , death_pc , reg4_y_pred , reg4_res )
# Get the predicted y values from the model
df$reg4_y_pred <- reg4$fitted.values
# Calculate the errors of the model
df$reg4_res <- df$ln_death_pc - df$reg4_y_pred
# Find countries with largest negative errors
df %>% top_n( -5 , reg4_res ) %>%
select( country , ln_death_pc , reg4_y_pred , reg4_res )
# Find countries with largest positive errors
df %>% top_n( 5 , reg4_res ) %>%
select( country , ln_death_pc , reg4_y_pred , reg4_res )
